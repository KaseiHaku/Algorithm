G: Grandparent
P: Parent
N: Node


LL: 
    即在 Grandparent 节点的左孩子（Parent）的左孩子（Node）添加节点（不管添加在 Node 的左边还是右边）导致的失衡，
    采用对 Parent 进行右旋来平衡，只需旋转一次
RR: 
    即在 Grandparent 节点的右孩子（Parent）的右孩子（Node）添加节点（不管添加在 Node 的左边还是右边）导致的失衡，
    采用对 Parent 进行左旋来平衡，只需旋转一次

LR: 
    即在 Grandparent 节点的左孩子（Parent）的右孩子（Node）添加节点导致的失衡，
    采用先对 Parent 做一次左旋转，得到一个 LL 型的结构，再对旋转值后的 Node 进行右旋

RL: 
    即在 Grandparent 节点的右孩子的左孩子添加节点导致的失衡
    采用先对 Parent 做一次右旋转，得到一个 RR 型的结构，再对旋转值后的 Node 进行左旋

添加：
    可能会导致所有祖先节（不包括父节点）点失衡
    只要让导致失衡的子树恢复平衡即可，单旋或双旋，时间复杂度 O(1)
   
删除： 
    只会导致父节点失衡
    让父节点恢复平衡后，可能会导致更高层的祖先节点失衡，需要对每个失衡的祖先节点做旋转，时间复杂度 O(logn)
